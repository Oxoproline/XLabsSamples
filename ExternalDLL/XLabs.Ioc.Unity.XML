<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XLabs.Ioc.Unity</name>
    </assembly>
    <members>
        <member name="T:XLabs.Ioc.Unity.UnityResolver">
            <summary>
            Class UnityResolver.
            </summary>
        </member>
        <member name="M:XLabs.Ioc.Unity.UnityResolver.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Ioc.Unity.UnityResolver"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:XLabs.Ioc.Unity.UnityResolver.Resolve``1">
            <summary>
            Resolve a dependency.
            </summary>
            <typeparam name="T">Type of instance to get.</typeparam>
            <returns>An instance of {T} if successful, otherwise null.</returns>
        </member>
        <member name="M:XLabs.Ioc.Unity.UnityResolver.Resolve(System.Type)">
            <summary>
            Resolve a dependency by type.
            </summary>
            <param name="type">Type of object.</param>
            <returns>An instance to type if found as <see cref="T:System.Object"/>, otherwise null.</returns>
        </member>
        <member name="M:XLabs.Ioc.Unity.UnityResolver.ResolveAll``1">
            <summary>
            Resolve a dependency.
            </summary>
            <typeparam name="T">Type of instance to get.</typeparam>
            <returns>All instances of {T} if successful, otherwise null.</returns>
        </member>
        <member name="M:XLabs.Ioc.Unity.UnityResolver.ResolveAll(System.Type)">
            <summary>
            Resolve a dependency by type.
            </summary>
            <param name="type">Type of object.</param>
            <returns>All instances of type if found as <see cref="T:System.Object"/>, otherwise null.</returns>
        </member>
        <member name="M:XLabs.Ioc.Unity.UnityResolver.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified type is registered.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is registered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XLabs.Ioc.Unity.UnityResolver.IsRegistered``1">
            <summary>
            Determines whether this instance is registered.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><c>true</c> if this instance is registered; otherwise, <c>false</c>.</returns>
        </member>
    </members>
</doc>
