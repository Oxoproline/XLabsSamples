<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XLabs.Caching</name>
    </assembly>
    <members>
        <member name="M:XLabs.Caching.IAsyncSimpleCache.RemoveAsync(System.String)">
            <summary>
            Removes the specified item from the cache.
            </summary>
            <param name="key">The identifier for the item to delete.</param>
            <returns>
            True if the item was successfully removed from the cache; false otherwise.
            </returns>
        </member>
        <member name="M:XLabs.Caching.IAsyncSimpleCache.RemoveAllAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the cache for all the keys provided.
            </summary>
            <param name="keys">The keys to remove.</param>
        </member>
        <member name="M:XLabs.Caching.IAsyncSimpleCache.GetAsync``1(System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">The identifier for the item to retrieve.</param>
            <returns>
            The retrieved item, or <value>null</value> if the key was not found.
            </returns>
        </member>
        <member name="M:XLabs.Caching.IAsyncSimpleCache.AddAsync``1(System.String,``0)">
            <summary>
            Adds a new item into the cache at the specified cache key only if the cache is empty.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <returns>True if item was added, otherwise false.</returns>
            <remarks>The item does not expire unless it is removed due memory pressure.</remarks>
        </member>
        <member name="M:XLabs.Caching.IAsyncSimpleCache.SetAsync``1(System.String,``0)">
            <summary>
            Sets an item into the cache at the cache key specified regardless if it already exists or not.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item.</param>
            <param name="value">Item to set.</param>
            <returns>True if item was added, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.IAsyncSimpleCache.ReplaceAsync``1(System.String,``0)">
            <summary>
            Replaces the item at the cache.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item to replace.</param>
            <param name="value">Item to replace with.</param>
            <returns>True if the item exists, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.IAsyncSimpleCache.FlushAllAsync">
            <summary>
            Invalidates all data on the cache.
            </summary>
        </member>
        <member name="M:XLabs.Caching.IAsyncSimpleCache.GetAllAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves multiple items from the cache. 
            The default value of T is set for all keys that do not exist.
            </summary>
            <typeparam name="T">Type of values to get.</typeparam>
            <param name="keys">The list of identifiers for the items to retrieve.</param>
            <returns>
            a Dictionary holding all items indexed by their key.
            </returns>
        </member>
        <member name="M:XLabs.Caching.IAsyncSimpleCache.SetAllAsync``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Sets multiple items to the cache. 
            </summary>
            <typeparam name="T">Type of values to set.</typeparam>
            <param name="values">The values.</param>
        </member>
        <member name="M:XLabs.Caching.IAsyncCacheProvider.AddAsync``1(System.String,``0,System.DateTime)">
            <summary>
            Adds a new item into the cache at the specified cache key only if the cache is empty.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item.</param>
            <param name="value">Item to add.</param>
            <param name="expiresAt">Expiration time.</param>
            <returns>True if item was added, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.IAsyncCacheProvider.Set``1(System.String,``0,System.DateTime)">
            <summary>
            Sets an item into the cache at the cache key specified regardless if it already exists or not.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item.</param>
            <param name="value">Item to set.</param>
            <param name="expiresAt">Expiration time.</param>
            <returns>True if item was set, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.IAsyncCacheProvider.Replace``1(System.String,``0,System.DateTime)">
            <summary>
            Replaces the item at the cache.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item to replace.</param>
            <param name="value">Item to replace with.</param>
            <param name="expiresAt">Expiration time.</param>
            <returns>True if the item exists, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.IAsyncCacheProvider.Add``1(System.String,``0,System.TimeSpan)">
            <summary>
            Adds a new item into the cache at the specified cache key only if the cache is empty.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item.</param>
            <param name="value">Item to add.</param>
            <param name="expiresIn">Expiration timespan.</param>
            <returns>True if item was added, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.IAsyncCacheProvider.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Sets an item into the cache at the cache key specified regardless if it already exists or not.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item.</param>
            <param name="value">Item to set.</param>
            <param name="expiresIn">Expiration timespan.</param>
            <returns>True if item was set, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.IAsyncCacheProvider.Replace``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces an item in the cache.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item to replace.</param>
            <param name="value">Item to replace with.</param>
            <param name="expiresIn">Expiration timespan.</param>
            <returns>True if item was replaced, otherwise false.</returns>
        </member>
        <member name="T:XLabs.Caching.ICacheProvider">
            <summary>
            The CacheProvider interface.
            </summary>
        </member>
        <member name="T:XLabs.Caching.ISimpleCache">
            <summary>
            A common cache provider interface.
            </summary>
        </member>
        <member name="M:XLabs.Caching.ISimpleCache.Remove(System.String)">
            <summary>
            Removes the specified item from the cache.
            </summary>
            <param name="key">The identifier for the item to delete.</param>
            <returns>
            True if the item was successfully removed from the cache; false otherwise.
            </returns>
        </member>
        <member name="M:XLabs.Caching.ISimpleCache.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the cache for all the keys provided.
            </summary>
            <param name="keys">The keys to remove.</param>
        </member>
        <member name="M:XLabs.Caching.ISimpleCache.Get``1(System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">The identifier for the item to retrieve.</param>
            <returns>
            The retrieved item, or <value>null</value> if the key was not found.
            </returns>
        </member>
        <member name="M:XLabs.Caching.ISimpleCache.Add``1(System.String,``0)">
            <summary>
            Adds a new item into the cache at the specified cache key only if the cache is empty.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <returns>True if item was added, otherwise false.</returns>
            <remarks>The item does not expire unless it is removed due memory pressure.</remarks>
        </member>
        <member name="M:XLabs.Caching.ISimpleCache.Set``1(System.String,``0)">
            <summary>
            Sets an item into the cache at the cache key specified regardless if it already exists or not.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item.</param>
            <param name="value">Item to set.</param>
            <returns>True if item was added, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.ISimpleCache.Replace``1(System.String,``0)">
            <summary>
            Replaces the item at the cache.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item to replace.</param>
            <param name="value">Item to replace with.</param>
            <returns>True if the item exists, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.ISimpleCache.FlushAll">
            <summary>
            Invalidates all data on the cache.
            </summary>
        </member>
        <member name="M:XLabs.Caching.ISimpleCache.GetAll``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves multiple items from the cache. 
            The default value of T is set for all keys that do not exist.
            </summary>
            <typeparam name="T">Type of values to get.</typeparam>
            <param name="keys">The list of identifiers for the items to retrieve.</param>
            <returns>
            a Dictionary holding all items indexed by their key.
            </returns>
        </member>
        <member name="M:XLabs.Caching.ISimpleCache.SetAll``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Sets multiple items to the cache. 
            </summary>
            <typeparam name="T">Type of values to set.</typeparam>
            <param name="values">The values.</param>
        </member>
        <member name="M:XLabs.Caching.ICacheProvider.Add``1(System.String,``0,System.DateTime)">
            <summary>
            Adds a new item into the cache at the specified cache key only if the cache is empty.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item.</param>
            <param name="value">Item to add.</param>
            <param name="expiresAt">Expiration time.</param>
            <returns>True if item was added, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.ICacheProvider.Set``1(System.String,``0,System.DateTime)">
            <summary>
            Sets an item into the cache at the cache key specified regardless if it already exists or not.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item.</param>
            <param name="value">Item to set.</param>
            <param name="expiresAt">Expiration time.</param>
            <returns>True if item was set, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.ICacheProvider.Replace``1(System.String,``0,System.DateTime)">
            <summary>
            Replaces the item at the cache.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item to replace.</param>
            <param name="value">Item to replace with.</param>
            <param name="expiresAt">Expiration time.</param>
            <returns>True if the item exists, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.ICacheProvider.Add``1(System.String,``0,System.TimeSpan)">
            <summary>
            Adds a new item into the cache at the specified cache key only if the cache is empty.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item.</param>
            <param name="value">Item to add.</param>
            <param name="expiresIn">Expiration timespan.</param>
            <returns>True if item was added, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.ICacheProvider.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Sets an item into the cache at the cache key specified regardless if it already exists or not.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item.</param>
            <param name="value">Item to set.</param>
            <param name="expiresIn">Expiration timespan.</param>
            <returns>True if item was set, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Caching.ICacheProvider.Replace``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces an item in the cache.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">Key for the item to replace.</param>
            <param name="value">Item to replace with.</param>
            <param name="expiresIn">Expiration timespan.</param>
            <returns>True if item was replaced, otherwise false.</returns>
        </member>
    </members>
</doc>
